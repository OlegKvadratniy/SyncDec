#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–µ—Ç–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç broadcast –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
- –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ IP-–∞–¥—Ä–µ—Å–æ–≤
"""

import socket
import time
import netifaces
import threading
import pyautogui
import time

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π
RESET = "\033[0m"
BOLD = "\033[1m"
DIM = "\033[2m"

# –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
RED = "\033[31m"
GREEN = "\033[32m"
YELLOW = "\033[33m"
BLUE = "\033[34m"
CYAN = "\033[36m"
MAGENTA = "\033[35m"


def get_local_broadcasts():
    broadcasts = []
    for interface in netifaces.interfaces():
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            if interface.startswith(("lo", "tun", "vmnet")):
                continue

            addrs = netifaces.ifaddresses(interface).get(netifaces.AF_INET, [])
            for addr in addrs:
                if "broadcast" in addr:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–µ–Ω
                    if addr.get("addr") not in ("127.0.0.1", "0.0.0.0"):
                        broadcasts.append(addr["broadcast"])

        except (ValueError, KeyError):
            continue

    return broadcasts or ["255.255.255.255"]  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback


def discover_servers(udp_port=50000, timeout=3):
    """–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–µ—Ç–∏"""
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    udp_socket.settimeout(timeout)

    message = "DISCOVER_REQUEST"
    servers = []

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ broadcast-–∞–¥—Ä–µ—Å–∞
    broadcast_targets = get_local_broadcasts()
    print(f"{CYAN}{BOLD}üîé –°–∫–∞–Ω–∏—Ä—É—é —Å–µ—Ç–∏:{RESET} {', '.join(broadcast_targets)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    for target in broadcast_targets:
        try:
            udp_socket.sendto(message.encode(), (target, udp_port))
        except Exception as e:
            print(f"{YELLOW}‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {target}: {e}{RESET}")

    # –°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            data, addr = udp_socket.recvfrom(1024)
            response_message = data.decode().strip()
            if response_message.startswith("SERVER_RESPONSE;"):
                parts = response_message.split(";")
                if len(parts) >= 3:
                    server_name = parts[1]
                    tcp_port = int(parts[2])
                    servers.append((server_name, addr[0], tcp_port))
                    print(
                        f"{GREEN}‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä:{RESET} {BOLD}{server_name}{RESET} ({addr[0]}:{tcp_port})"
                    )
        except socket.timeout:
            break
        except Exception as e:
            print(f"{RED}üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}{RESET}")

    udp_socket.close()
    return servers


def tcp_client(server_ip, tcp_port):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ TCP –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client_socket.settimeout(5)
        client_socket.connect((server_ip, tcp_port))
        print(f"{GREEN}üü¢ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {server_ip}:{tcp_port}{RESET}")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        valid_sides = {1: "—Å–ø–µ—Ä–µ–¥–∏", 2: "—Å–∑–∞–¥–∏", 3: "—Å–ª–µ–≤–∞", 4: "—Å–ø—Ä–∞–≤–∞"}
        print("\n–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:")
        for key, value in valid_sides.items():
            print(f"{key}. {value.capitalize()}")

        while True:
            try:
                choice = int(
                    input(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É [1.–°–ø–µ—Ä–µ–¥–∏/2.–°–∑–∞–¥–∏/3.–°–ª–µ–≤–∞/4.–°–ø—Ä–∞–≤–∞]: "
                    ).strip()
                )
                if choice in valid_sides:
                    side = valid_sides[choice]
                    print(
                        f"\033[93m\u25aa –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {side.capitalize()}\033[0m"
                    )
                    client_socket.sendall(f"SERVER_SIDE;{side}".encode("utf-8"))
                    break
                else:
                    print(
                        "\033[91m‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.\033[0m"
                    )
            except ValueError:
                print("\033[91m‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.\033[0m")

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
        cursor_thread = threading.Thread(
            target=track_cursor, args=(client_socket, side), daemon=True
        )
        cursor_thread.start()

        print(f"{BLUE}–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):{RESET}")
        while True:
            message = input(f"{MAGENTA}{BOLD}> {RESET}")
            if message.lower() == "exit":
                print(f"{YELLOW}üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...{RESET}")
                break

            try:
                client_socket.sendall(message.encode("utf-8"))
                data = client_socket.recv(1024)
                print(f"{CYAN}üî∑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:{RESET} {data.decode('utf-8')}")
            except socket.timeout:
                print(f"{YELLOW}‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞{RESET}")

    except Exception as e:
        print(f"{RED}üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{RESET}")
    finally:
        client_socket.close()
        print(f"{YELLOW}üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ{RESET}")


def track_cursor(client_socket, side):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞ –∑–∞ –∫—Ä–∞—è —Å–µ—Ä–≤–µ—Ä—É."""
    screen_width, screen_height = pyautogui.size()
    while True:
        x, y = pyautogui.position()
        if x <= 0:
            # –ö—É—Ä—Å–æ—Ä –≤—ã—à–µ–ª –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
            client_socket.sendall(f"CURSOR_EXIT;left;{y}".encode("utf-8"))
            pyautogui.moveTo(screen_width - 1, y)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
        elif x >= screen_width - 1:
            # –ö—É—Ä—Å–æ—Ä –≤—ã—à–µ–ª –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
            client_socket.sendall(f"CURSOR_EXIT;right;{y}".encode("utf-8"))
            pyautogui.moveTo(0, y)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
        elif y <= 0:
            # –ö—É—Ä—Å–æ—Ä –≤—ã—à–µ–ª –∑–∞ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π
            client_socket.sendall(f"CURSOR_EXIT;top;{x}".encode("utf-8"))
            pyautogui.moveTo(x, screen_height - 1)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–Ω–∏–∑
        elif y >= screen_height - 1:
            # –ö—É—Ä—Å–æ—Ä –≤—ã—à–µ–ª –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π
            client_socket.sendall(f"CURSOR_EXIT;bottom;{x}".encode("utf-8"))
            pyautogui.moveTo(x, 0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–≤–µ—Ä—Ö
        time.sleep(0.01)  # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä


if __name__ == "__main__":
    print(f"{BLUE}{BOLD}üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...{RESET}")
    servers = discover_servers()

    if not servers:
        print(f"{RED}{BOLD}‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã{RESET}")
        exit(0)

    print(f"\n{GREEN}{BOLD}üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:{RESET}")
    for idx, (name, ip, port) in enumerate(servers):
        print(f"{YELLOW}{idx}{RESET}: {CYAN}{BOLD}{name}{RESET} ({ip}:{port})")

    try:
        choice = int(
            input(
                f"{MAGENTA}{BOLD}üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, —É–∫–∞–∑–∞–≤ –µ–≥–æ –Ω–æ–º–µ—Ä: {RESET}"
            )
        )
        if 0 <= choice < len(servers):
            selected = servers[choice]
            tcp_client(selected[1], selected[2])
        else:
            print(f"{YELLOW}‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{RESET}")
    except ValueError:
        print(f"{YELLOW}‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ{RESET}")
