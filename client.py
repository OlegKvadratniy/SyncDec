#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–µ—Ç–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç broadcast –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
- –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ IP-–∞–¥—Ä–µ—Å–æ–≤
"""

import socket
import time
import netifaces
import curses
import time


def get_local_broadcasts():
    broadcasts = []
    for interface in netifaces.interfaces():
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –Ω–µ–Ω—É–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            if interface.startswith(("lo", "tun")):  # —Ç–æ–ª—å–∫–æ loopback –∏ VPN
                continue

            addrs = netifaces.ifaddresses(interface).get(netifaces.AF_INET, [])
            for addr in addrs:
                if "broadcast" in addr:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–µ–Ω (–∏–º–µ–µ—Ç IP)
                    if addr.get("addr") not in ("127.0.0.1", "0.0.0.0"):
                        broadcasts.append(addr["broadcast"])

        except (ValueError, KeyError):
            continue

    return broadcasts or ["255.255.255.255"]  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback


def discover_servers(udp_port=50000, timeout=3):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–µ—Ç–∏"""
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    udp_socket.settimeout(timeout)

    message = "DISCOVER_REQUEST"
    servers = []

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ broadcast-–∞–¥—Ä–µ—Å–∞
    broadcast_targets = get_local_broadcasts()
    print(f"üîé –°–∫–∞–Ω–∏—Ä—É—é —Å–µ—Ç–∏: {', '.join(broadcast_targets)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    for target in broadcast_targets:
        try:
            udp_socket.sendto(message.encode(), (target, udp_port))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {target}: {e}")

    # –°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            data, addr = udp_socket.recvfrom(1024)
            message = data.decode().strip()
            if message.startswith("SERVER_RESPONSE;"):
                parts = message.split(";")
                if len(parts) >= 3:
                    server_name = parts[1]
                    tcp_port = int(parts[2])
                    servers.append((server_name, addr[0], tcp_port))
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä: {server_name} ({addr[0]}:{tcp_port})")
        except socket.timeout:
            break
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    udp_socket.close()
    return servers


import socket


def tcp_client(server_ip, tcp_port):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ TCP –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client_socket.settimeout(5)
        client_socket.connect((server_ip, tcp_port))
        print(f"\nüü¢ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {server_ip}:{tcp_port}")

        # –ë–ª–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        valid_sides = {1: "—Å–ø–µ—Ä–µ–¥–∏", 2: "—Å–∑–∞–¥–∏", 3: "—Å–ª–µ–≤–∞", 4: "—Å–ø—Ä–∞–≤–∞"}
        print("\n–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:")
        for key, value in valid_sides.items():
            print(f"{key}. {value.capitalize()}")

        while True:
            try:
                choice = int(
                    input(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É [1.–°–ø–µ—Ä–µ–¥–∏/2.–°–∑–∞–¥–∏/3.–°–ª–µ–≤–∞/4.–°–ø—Ä–∞–≤–∞]: "
                    ).strip()
                )
                if choice in valid_sides:
                    side = valid_sides[choice]
                    print(
                        f"\033[93m\u25AA –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {side.capitalize()}\033[0m"
                    )
                    break
                else:
                    print(
                        "\033[91m‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.\033[0m"
                    )
            except ValueError:
                print("\033[91m‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.\033[0m")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è curses
        stdscr = curses.initscr()
        curses.curs_set(0)  # –°–∫—Ä—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å–æ—Ä
        stdscr.nodelay(1)  # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤–≤–æ–¥
        stdscr.timeout(100)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
        client_cursor = [0, 0]

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
        print("\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        while True:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
                try:
                    key = stdscr.getch()
                    if key == curses.KEY_LEFT:
                        client_cursor[1] -= 1
                    elif key == curses.KEY_RIGHT:
                        client_cursor[1] += 1
                    elif key == curses.KEY_UP:
                        client_cursor[0] -= 1
                    elif key == curses.KEY_DOWN:
                        client_cursor[0] += 1
                    elif key == ord("q"):
                        break
                except:
                    pass

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = input("\033[94m> \033[0m")
                if message.lower() == "exit":
                    break

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
                cursor_info = f"CURSOR;{client_cursor[0]};{client_cursor[1]}"
                client_socket.sendall(cursor_info.encode("utf-8"))

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                data = client_socket.recv(1024)
                if data:
                    response = data.decode("utf-8")
                    if response.startswith("CURSOR;"):
                        parts = response.split(";")
                        if len(parts) == 3:
                            server_cursor = [int(parts[1]), int(parts[2])]
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
                            stdscr.clear()
                            stdscr.addstr(server_cursor[0], server_cursor[1], "S")
                            stdscr.addstr(client_cursor[0], client_cursor[1], "C")
                            stdscr.refresh()

            except socket.timeout:
                print("\033[33m–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞\033[0m")

            except Exception as send_error:
                print(f"\033[91m–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_error}\033[0m")
                break

    except Exception as connect_error:
        print(f"\033[91müî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connect_error}\033[0m")

    finally:
        client_socket.close()
        curses.endwin()
        print("\033[90müîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ\033[0m")


if __name__ == "__main__":
    print("üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
    servers = discover_servers()

    if not servers:
        print("‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        exit(0)

    print("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
    for idx, (name, ip, port) in enumerate(servers):
        print(f"{idx}: {name} ({ip}:{port})")

    try:
        choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞: "))
        if 0 <= choice < len(servers):
            selected = servers[choice]
            tcp_client(selected[1], selected[2])
        else:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    except ValueError:
        print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
