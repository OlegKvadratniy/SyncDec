#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–ª–∏–µ–Ω—Ç:
1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç UDP broadcast —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤.
2. –°–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.
3. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
"""

import socket
import socket
import threading
import curses
import time


def tcp_client(server_ip, tcp_port):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ TCP –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client_socket.settimeout(5)
        client_socket.connect((server_ip, tcp_port))
        print(f"\nüü¢ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {server_ip}:{tcp_port}")

        # –ë–ª–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        valid_sides = {1: "—Å–ø–µ—Ä–µ–¥–∏", 2: "—Å–∑–∞–¥–∏", 3: "—Å–ª–µ–≤–∞", 4: "—Å–ø—Ä–∞–≤–∞"}
        print("\n–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:")
        for key, value in valid_sides.items():
            print(f"{key}. {value.capitalize()}")

        while True:
            try:
                choice = int(
                    input(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É [1.–°–ø–µ—Ä–µ–¥–∏/2.–°–∑–∞–¥–∏/3.–°–ª–µ–≤–∞/4.–°–ø—Ä–∞–≤–∞]: "
                    ).strip()
                )
                if choice in valid_sides:
                    side = valid_sides[choice]
                    print(
                        f"\033[93m\u25AA –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {side.capitalize()}\033[0m"
                    )
                    break
                else:
                    print(
                        "\033[91m‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.\033[0m"
                    )
            except ValueError:
                print("\033[91m‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.\033[0m")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è curses
        stdscr = curses.initscr()
        curses.curs_set(0)  # –°–∫—Ä—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å–æ—Ä
        stdscr.nodelay(1)  # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤–≤–æ–¥
        stdscr.timeout(100)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
        client_cursor = [0, 0]

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
        print("\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
        while True:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
                try:
                    key = stdscr.getch()
                    if key == curses.KEY_LEFT:
                        client_cursor[1] -= 1
                    elif key == curses.KEY_RIGHT:
                        client_cursor[1] += 1
                    elif key == curses.KEY_UP:
                        client_cursor[0] -= 1
                    elif key == curses.KEY_DOWN:
                        client_cursor[0] += 1
                    elif key == ord("q"):
                        break
                except:
                    pass

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = input("\033[94m> \033[0m")
                if message.lower() == "exit":
                    break

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
                cursor_info = f"CURSOR;{client_cursor[0]};{client_cursor[1]}"
                client_socket.sendall(cursor_info.encode("utf-8"))

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                data = client_socket.recv(1024)
                if data:
                    response = data.decode("utf-8")
                    if response.startswith("CURSOR;"):
                        parts = response.split(";")
                        if len(parts) == 3:
                            server_cursor = [int(parts[1]), int(parts[2])]
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
                            stdscr.clear()
                            stdscr.addstr(server_cursor[0], server_cursor[1], "S")
                            stdscr.addstr(client_cursor[0], client_cursor[1], "C")
                            stdscr.refresh()

            except socket.timeout:
                print("\033[33m–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞\033[0m")

            except Exception as send_error:
                print(f"\033[91m–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_error}\033[0m")
                break

    except Exception as connect_error:
        print(f"\033[91müî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connect_error}\033[0m")

    finally:
        client_socket.close()
        curses.endwin()
        print("\033[90müîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ\033[0m")
