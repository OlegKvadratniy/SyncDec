#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–µ—Ä:
1. –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.
2. –ó–∞–ø—É—Å–∫–∞–µ—Ç TCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–æ—Ä–µ.
3. –ó–∞–ø—É—Å–∫–∞–µ—Ç UDP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è.
"""

import socket
import threading
import sys
import curses
import pyautogui
import time

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π
RESET = "\033[0m"
BOLD = "\033[1m"
DIM = "\033[2m"

# –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
RED = "\033[31m"
GREEN = "\033[32m"
YELLOW = "\033[33m"
BLUE = "\033[34m"
CYAN = "\033[36m"
MAGENTA = "\033[35m"


def handle_client(client_socket, addr):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ TCP (–æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–æ—Ä–µ)"""
    print(f"{GREEN}[TCP] –ö–ª–∏–µ–Ω—Ç {addr} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.{RESET}")
    server_side = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    screen_width, screen_height = pyautogui.size()

    def track_server_cursor():
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç—É."""
        while True:
            x, y = pyautogui.position()
            if x <= 0:
                client_socket.sendall(f"CURSOR_EXIT;left;{y}".encode("utf-8"))
                pyautogui.moveTo(screen_width - 1, y)
            elif x >= screen_width - 1:
                client_socket.sendall(f"CURSOR_EXIT;right;{y}".encode("utf-8"))
                pyautogui.moveTo(0, y)
            elif y <= 0:
                client_socket.sendall(f"CURSOR_EXIT;top;{x}".encode("utf-8"))
                pyautogui.moveTo(x, screen_height - 1)
            elif y >= screen_height - 1:
                client_socket.sendall(f"CURSOR_EXIT;bottom;{x}".encode("utf-8"))
                pyautogui.moveTo(x, 0)
            time.sleep(0.01)

    try:
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
        cursor_thread = threading.Thread(target=track_server_cursor, daemon=True)
        cursor_thread.start()

        while True:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            try:
                data = client_socket.recv(1024)
                if not data:
                    break

                message = data.decode("utf-8")
                if message.startswith("CURSOR_EXIT;"):
                    parts = message.split(";")
                    if len(parts) == 3:
                        direction = parts[1]
                        coord = int(parts[2])
                        # –î–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞
                        if server_side == "—Å–ª–µ–≤–∞" and direction == "right":
                            pyautogui.moveTo(0, coord)  # –ü–æ—è–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–≤–∞
                        elif server_side == "—Å–ø—Ä–∞–≤–∞" and direction == "left":
                            pyautogui.moveTo(
                                screen_width - 1, coord
                            )  # –ü–æ—è–≤–ª—è–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞
                        elif server_side == "—Å–ø–µ—Ä–µ–¥–∏" and direction == "bottom":
                            pyautogui.moveTo(coord, 0)  # –ü–æ—è–≤–ª—è–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É
                        elif server_side == "—Å–∑–∞–¥–∏" and direction == "top":
                            pyautogui.moveTo(
                                coord, screen_height - 1
                            )  # –ü–æ—è–≤–ª—è–µ—Ç—Å—è —Å–Ω–∏–∑—É

                elif message.startswith("SERVER_SIDE;"):
                    parts = message.split(";")
                    if len(parts) == 2:
                        server_side = parts[1]
                        print(
                            f"{MAGENTA}[INFO] –ö–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª —Å—Ç–æ—Ä–æ–Ω—É —Å–µ—Ä–≤–µ—Ä–∞: {server_side}{RESET}"
                        )

                else:
                    # –≠—Ö–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    client_socket.sendall(f"–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª: {message}".encode("utf-8"))

            except Exception as e:
                print(f"{RED}[TCP] –û—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {addr}: {e}{RESET}")
                break

    except Exception as e:
        print(f"{RED}[TCP] –û—à–∏–±–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {addr}: {e}{RESET}")
    finally:
        client_socket.close()
        print(f"{YELLOW}[TCP] –ö–ª–∏–µ–Ω—Ç {addr} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.{RESET}")


def tcp_server(host, port):
    """–ó–∞–ø—É—Å–∫–∞–µ–º TCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–æ—Ä–µ"""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.bind((host, port))
        server_socket.listen(5)
        print(
            f"{CYAN}[TCP] –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ {host if host else '0.0.0.0'}:{port}{RESET}"
        )
    except Exception as e:
        print(f"{RED}[TCP] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {e}{RESET}")
        sys.exit(1)

    while True:
        client_socket, addr = server_socket.accept()
        client_thread = threading.Thread(
            target=handle_client, args=(client_socket, addr)
        )
        client_thread.start()


def udp_discovery(server_name, tcp_port, udp_port=50000):
    """UDP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è.
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "DISCOVER_REQUEST" –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
    "SERVER_RESPONSE;{server_name};{tcp_port}"
    """
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        udp_socket.bind(("", udp_port))
        print(f"{CYAN}[UDP] Discovery —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {udp_port}{RESET}")
    except Exception as e:
        print(f"{RED}[UDP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ UDP —Å–µ—Ä–≤–µ—Ä–∞: {e}{RESET}")
        sys.exit(1)

    while True:
        try:
            data, addr = udp_socket.recvfrom(1024)
            message = data.decode("utf-8")
            if message.strip() == "DISCOVER_REQUEST":
                response = f"SERVER_RESPONSE;{server_name};{tcp_port}"
                udp_socket.sendto(response.encode("utf-8"), addr)
                print(f"{GREEN}[UDP] –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—Ç {addr}{RESET}")
        except Exception as e:
            print(f"{YELLOW}[UDP] –û—à–∏–±–∫–∞: {e}{RESET}")


if __name__ == "__main__":
    # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"{BOLD}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...{RESET}")
    server_name = input(f"{MAGENTA}–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {RESET}")
    tcp_port = 12345  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–≤–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    host = ""  # '' –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö

    # –ó–∞–ø—É—Å–∫ UDP discovery —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    udp_thread = threading.Thread(
        target=udp_discovery, args=(server_name, tcp_port), daemon=True
    )
    udp_thread.start()

    # –ó–∞–ø—É—Å–∫ TCP-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    tcp_thread = threading.Thread(target=tcp_server, args=(host, tcp_port), daemon=True)
    tcp_thread.start()

    print(f"{GREEN}–°–µ—Ä–≤–µ—Ä '{server_name}' –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!{RESET}")
    print(f"{BLUE}–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C.{RESET}")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print(f"\n{YELLOW}üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.{RESET}")
        sys.exit(0)
